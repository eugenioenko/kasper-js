(()=>{"use strict";class e{constructor(e,t,s){this.value=e,this.line=t,this.col=s}toString(){return this.value.toString()}}class t{}class s extends t{constructor(e,t,s,i,r=0){super(),this.type="element",this.name=e,this.attributes=t,this.children=s,this.self=i,this.line=r}accept(e,t){return e.visitElementKNode(this,t)}toString(){return"KNode.Element"}}class i extends t{constructor(e,t,s=0){super(),this.type="attribute",this.name=e,this.value=t,this.line=s}accept(e,t){return e.visitAttributeKNode(this,t)}toString(){return"KNode.Attribute"}}class r extends t{constructor(e,t=0){super(),this.type="text",this.value=e,this.line=t}accept(e,t){return e.visitTextKNode(this,t)}toString(){return"KNode.Text"}}class n extends t{constructor(e,t=0){super(),this.type="comment",this.value=e,this.line=t}accept(e,t){return e.visitCommentKNode(this,t)}toString(){return"KNode.Comment"}}class a extends t{constructor(e,t=0){super(),this.type="doctype",this.value=e,this.line=t}accept(e,t){return e.visitDoctypeKNode(this,t)}toString(){return"KNode.Doctype"}}var h;!function(e){e[e.Eof=0]="Eof",e[e.Panic=1]="Panic",e[e.Ampersand=2]="Ampersand",e[e.AtSign=3]="AtSign",e[e.Caret=4]="Caret",e[e.Comma=5]="Comma",e[e.Dollar=6]="Dollar",e[e.Dot=7]="Dot",e[e.Hash=8]="Hash",e[e.LeftBrace=9]="LeftBrace",e[e.LeftBracket=10]="LeftBracket",e[e.LeftParen=11]="LeftParen",e[e.Percent=12]="Percent",e[e.Pipe=13]="Pipe",e[e.RightBrace=14]="RightBrace",e[e.RightBracket=15]="RightBracket",e[e.RightParen=16]="RightParen",e[e.Semicolon=17]="Semicolon",e[e.Slash=18]="Slash",e[e.Star=19]="Star",e[e.Arrow=20]="Arrow",e[e.Bang=21]="Bang",e[e.BangEqual=22]="BangEqual",e[e.Colon=23]="Colon",e[e.Equal=24]="Equal",e[e.EqualEqual=25]="EqualEqual",e[e.Greater=26]="Greater",e[e.GreaterEqual=27]="GreaterEqual",e[e.Less=28]="Less",e[e.LessEqual=29]="LessEqual",e[e.Minus=30]="Minus",e[e.MinusEqual=31]="MinusEqual",e[e.MinusMinus=32]="MinusMinus",e[e.PercentEqual=33]="PercentEqual",e[e.Plus=34]="Plus",e[e.PlusEqual=35]="PlusEqual",e[e.PlusPlus=36]="PlusPlus",e[e.Question=37]="Question",e[e.QuestionDot=38]="QuestionDot",e[e.QuestionQuestion=39]="QuestionQuestion",e[e.SlashEqual=40]="SlashEqual",e[e.StarEqual=41]="StarEqual",e[e.DotDot=42]="DotDot",e[e.DotDotDot=43]="DotDotDot",e[e.LessEqualGreater=44]="LessEqualGreater",e[e.Identifier=45]="Identifier",e[e.Template=46]="Template",e[e.String=47]="String",e[e.Number=48]="Number",e[e.And=49]="And",e[e.Const=50]="Const",e[e.Debug=51]="Debug",e[e.False=52]="False",e[e.Instanceof=53]="Instanceof",e[e.New=54]="New",e[e.Null=55]="Null",e[e.Undefined=56]="Undefined",e[e.Of=57]="Of",e[e.Or=58]="Or",e[e.True=59]="True",e[e.Typeof=60]="Typeof",e[e.Void=61]="Void",e[e.With=62]="With"}(h||(h={}));class o{constructor(e,t,s,i,r){this.name=h[e],this.type=e,this.lexeme=t,this.literal=s,this.line=i,this.col=r}toString(){return`[(${this.line}):"${this.lexeme}"]`}}const c=[" ","\n","\t","\r"],u=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"];class l{parse(t){for(this.current=0,this.line=1,this.col=1,this.source=t,this.errors=[],this.nodes=[];!this.eof();)try{const e=this.node();if(null===e)continue;this.nodes.push(e)}catch(t){if(t instanceof e)this.errors.push(`Parse Error (${t.line}:${t.col}) => ${t.value}`);else if(this.errors.push(`${t}`),this.errors.length>10)return this.errors.push("Parse Error limit exceeded"),this.nodes;break}return this.source="",this.nodes}match(...e){for(const t of e)if(this.check(t))return this.current+=t.length,!0;return!1}advance(e=""){this.eof()?this.error(`Unexpected end of file. ${e}`):(this.check("\n")&&(this.line+=1,this.col=0),this.col+=1,this.current++)}peek(...e){for(const t of e)if(this.check(t))return!0;return!1}check(e){return this.source.slice(this.current,this.current+e.length)===e}eof(){return this.current>this.source.length}error(t){throw new e(t,this.line,this.col)}node(){let e;return this.whitespace(),this.match("</")&&this.error("Unexpected closing tag"),e=this.match("\x3c!--")?this.comment():this.match("<!doctype")||this.match("<!DOCTYPE")?this.doctype():this.match("<")?this.element():this.text(),this.whitespace(),e}comment(){const e=this.current;do{this.advance("Expected comment closing '--\x3e'")}while(!this.match("--\x3e"));const t=this.source.slice(e,this.current-3);return new n(t,this.line)}doctype(){const e=this.current;do{this.advance("Expected closing doctype")}while(!this.match(">"));const t=this.source.slice(e,this.current-1).trim();return new a(t,this.line)}element(){const e=this.line,t=this.identifier("/",">");t||this.error("Expected a tag name");const i=this.attributes();if(this.match("/>")||u.includes(t)&&this.match(">"))return new s(t,i,[],!0,this.line);this.match(">")||this.error("Expected closing tag");let r=[];return this.whitespace(),this.peek("</")||(r=this.children(t)),this.close(t),new s(t,i,r,!1,e)}close(e){this.match("</")||this.error(`Expected </${e}>`),this.match(`${e}`)||this.error(`Expected </${e}>`),this.whitespace(),this.match(">")||this.error(`Expected </${e}>`)}children(e){const t=[];do{this.eof()&&this.error(`Expected </${e}>`);const s=this.node();null!==s&&t.push(s)}while(!this.peek("</"));return t}attributes(){const e=[];for(;!this.peek(">","/>")&&!this.eof();){this.whitespace();const t=this.line,s=this.identifier("=",">","/>");s||this.error("Blank attribute name"),this.whitespace();let r="";this.match("=")&&(this.whitespace(),r=this.match("'")?this.string("'"):this.match('"')?this.string('"'):this.identifier(">","/>")),this.whitespace(),e.push(new i(s,r,t))}return e}text(){const e=this.current,t=this.line;for(;!this.peek("<")&&!this.eof();)this.advance();const s=this.source.slice(e,this.current).trim();return s?new r(s,t):null}whitespace(){let e=0;for(;this.peek(...c)&&!this.eof();)e+=1,this.advance();return e}identifier(...e){this.whitespace();const t=this.current;for(;!this.peek(...c,...e);)this.advance(`Expected closing ${e}`);const s=this.current;return this.whitespace(),this.source.slice(t,s).trim()}string(e){const t=this.current;for(;!this.match(e);)this.advance(`Expected closing ${e}`);return this.source.slice(t,this.current-1)}}class p{constructor(){}}class d extends p{constructor(e,t,s){super(),this.name=e,this.value=t,this.line=s}accept(e){return e.visitAssignExpr(this)}toString(){return"Expr.Assign"}}class m extends p{constructor(e,t,s,i){super(),this.left=e,this.operator=t,this.right=s,this.line=i}accept(e){return e.visitBinaryExpr(this)}toString(){return"Expr.Binary"}}class f extends p{constructor(e,t,s,i){super(),this.callee=e,this.paren=t,this.args=s,this.line=i}accept(e){return e.visitCallExpr(this)}toString(){return"Expr.Call"}}class v extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitDebugExpr(this)}toString(){return"Expr.Debug"}}class x extends p{constructor(e,t){super(),this.properties=e,this.line=t}accept(e){return e.visitDictionaryExpr(this)}toString(){return"Expr.Dictionary"}}class g extends p{constructor(e,t,s,i){super(),this.name=e,this.key=t,this.iterable=s,this.line=i}accept(e){return e.visitEachExpr(this)}toString(){return"Expr.Each"}}class E extends p{constructor(e,t,s,i){super(),this.entity=e,this.key=t,this.type=s,this.line=i}accept(e){return e.visitGetExpr(this)}toString(){return"Expr.Get"}}class k extends p{constructor(e,t){super(),this.expression=e,this.line=t}accept(e){return e.visitGroupingExpr(this)}toString(){return"Expr.Grouping"}}class w extends p{constructor(e,t){super(),this.name=e,this.line=t}accept(e){return e.visitKeyExpr(this)}toString(){return"Expr.Key"}}class y extends p{constructor(e,t,s,i){super(),this.left=e,this.operator=t,this.right=s,this.line=i}accept(e){return e.visitLogicalExpr(this)}toString(){return"Expr.Logical"}}class b extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitListExpr(this)}toString(){return"Expr.List"}}class S extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitLiteralExpr(this)}toString(){return"Expr.Literal"}}class P extends p{constructor(e,t){super(),this.clazz=e,this.line=t}accept(e){return e.visitNewExpr(this)}toString(){return"Expr.New"}}class T extends p{constructor(e,t,s){super(),this.left=e,this.right=t,this.line=s}accept(e){return e.visitNullCoalescingExpr(this)}toString(){return"Expr.NullCoalescing"}}class q extends p{constructor(e,t,s){super(),this.name=e,this.increment=t,this.line=s}accept(e){return e.visitPostfixExpr(this)}toString(){return"Expr.Postfix"}}class $ extends p{constructor(e,t,s,i){super(),this.entity=e,this.key=t,this.value=s,this.line=i}accept(e){return e.visitSetExpr(this)}toString(){return"Expr.Set"}}class N extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitTemplateExpr(this)}toString(){return"Expr.Template"}}class D extends p{constructor(e,t,s,i){super(),this.condition=e,this.thenExpr=t,this.elseExpr=s,this.line=i}accept(e){return e.visitTernaryExpr(this)}toString(){return"Expr.Ternary"}}class A extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitTypeofExpr(this)}toString(){return"Expr.Typeof"}}class C extends p{constructor(e,t,s){super(),this.operator=e,this.right=t,this.line=s}accept(e){return e.visitUnaryExpr(this)}toString(){return"Expr.Unary"}}class L extends p{constructor(e,t){super(),this.name=e,this.line=t}accept(e){return e.visitVariableExpr(this)}toString(){return"Expr.Variable"}}class B extends p{constructor(e,t){super(),this.value=e,this.line=t}accept(e){return e.visitVoidExpr(this)}toString(){return"Expr.Void"}}class M{constructor(){this.errorLevel=1}parse(t){this.current=0,this.tokens=t,this.errors=[];const s=[];for(;!this.eof();)try{s.push(this.expression())}catch(t){if(t instanceof e)this.errors.push(`Parse Error (${t.line}:${t.col}) => ${t.value}`);else if(this.errors.push(`${t}`),this.errors.length>100)return this.errors.push("Parse Error limit exceeded"),s;this.synchronize()}return s}match(...e){for(const t of e)if(this.check(t))return this.advance(),!0;return!1}advance(){return this.eof()||this.current++,this.previous()}peek(){return this.tokens[this.current]}previous(){return this.tokens[this.current-1]}check(e){return this.peek().type===e}eof(){return this.check(h.Eof)}consume(e,t){return this.check(e)?this.advance():this.error(this.peek(),t+`, unexpected token "${this.peek().lexeme}"`)}error(t,s){throw new e(s,t.line,t.col)}synchronize(){do{if(this.check(h.Semicolon)||this.check(h.RightBrace))return void this.advance();this.advance()}while(!this.eof())}foreach(e){this.current=0,this.tokens=e,this.errors=[],this.consume(h.Const,'Expected const definition starting "each" statement');const t=this.consume(h.Identifier,'Expected an identifier inside "each" statement');let s=null;this.match(h.With)&&(s=this.consume(h.Identifier,'Expected a "key" identifier after "with" keyword in foreach statement')),this.consume(h.Of,'Expected "of" keyword inside foreach statement');const i=this.expression();return new g(t,s,i,t.line)}expression(){const e=this.assignment();if(this.match(h.Semicolon))for(;this.match(h.Semicolon););return e}assignment(){const e=this.ternary();if(this.match(h.Equal,h.PlusEqual,h.MinusEqual,h.StarEqual,h.SlashEqual)){const t=this.previous();let s=this.assignment();if(e instanceof L){const i=e.name;return t.type!==h.Equal&&(s=new m(new L(i,i.line),t,s,t.line)),new d(i,s,i.line)}if(e instanceof E)return t.type!==h.Equal&&(s=new m(new E(e.entity,e.key,e.type,e.line),t,s,t.line)),new $(e.entity,e.key,s,e.line);this.error(t,"Invalid l-value, is not an assigning target.")}return e}ternary(){const e=this.nullCoalescing();if(this.match(h.Question)){const t=this.ternary();this.consume(h.Colon,'Expected ":" after ternary ? expression');const s=this.ternary();return new D(e,t,s,e.line)}return e}nullCoalescing(){const e=this.logicalOr();if(this.match(h.QuestionQuestion)){const t=this.nullCoalescing();return new T(e,t,e.line)}return e}logicalOr(){let e=this.logicalAnd();for(;this.match(h.Or);){const t=this.previous(),s=this.logicalAnd();e=new y(e,t,s,t.line)}return e}logicalAnd(){let e=this.equality();for(;this.match(h.And);){const t=this.previous(),s=this.equality();e=new y(e,t,s,t.line)}return e}equality(){let e=this.addition();for(;this.match(h.BangEqual,h.EqualEqual,h.Greater,h.GreaterEqual,h.Less,h.LessEqual);){const t=this.previous(),s=this.addition();e=new m(e,t,s,t.line)}return e}addition(){let e=this.modulus();for(;this.match(h.Minus,h.Plus);){const t=this.previous(),s=this.modulus();e=new m(e,t,s,t.line)}return e}modulus(){let e=this.multiplication();for(;this.match(h.Percent);){const t=this.previous(),s=this.multiplication();e=new m(e,t,s,t.line)}return e}multiplication(){let e=this.typeof();for(;this.match(h.Slash,h.Star);){const t=this.previous(),s=this.typeof();e=new m(e,t,s,t.line)}return e}typeof(){if(this.match(h.Typeof)){const e=this.previous(),t=this.typeof();return new A(t,e.line)}return this.unary()}unary(){if(this.match(h.Minus,h.Bang,h.Dollar,h.PlusPlus,h.MinusMinus)){const e=this.previous(),t=this.unary();return new C(e,t,e.line)}return this.newKeyword()}newKeyword(){if(this.match(h.New)){const e=this.previous(),t=this.call();return new P(t,e.line)}return this.call()}call(){let e=this.primary(),t=!0;do{if(t=!1,this.match(h.LeftParen)){t=!0;do{const t=[];if(!this.check(h.RightParen))do{t.push(this.expression())}while(this.match(h.Comma));const s=this.consume(h.RightParen,'Expected ")" after arguments');e=new f(e,s,t,s.line)}while(this.match(h.LeftParen))}this.match(h.Dot,h.QuestionDot)&&(t=!0,e=this.dotGet(e,this.previous())),this.match(h.LeftBracket)&&(t=!0,e=this.bracketGet(e,this.previous()))}while(t);return e}dotGet(e,t){const s=this.consume(h.Identifier,"Expect property name after '.'"),i=new w(s,s.line);return new E(e,i,t.type,s.line)}bracketGet(e,t){let s=null;return this.check(h.RightBracket)||(s=this.expression()),this.consume(h.RightBracket,'Expected "]" after an index'),new E(e,s,t.type,t.line)}primary(){if(this.match(h.False))return new S(!1,this.previous().line);if(this.match(h.True))return new S(!0,this.previous().line);if(this.match(h.Null))return new S(null,this.previous().line);if(this.match(h.Undefined))return new S(void 0,this.previous().line);if(this.match(h.Number)||this.match(h.String))return new S(this.previous().literal,this.previous().line);if(this.match(h.Template))return new N(this.previous().literal,this.previous().line);if(this.match(h.Identifier)){const e=this.previous();return this.match(h.PlusPlus)?new q(e,1,e.line):this.match(h.MinusMinus)?new q(e,-1,e.line):new L(e,e.line)}if(this.match(h.LeftParen)){const e=this.expression();return this.consume(h.RightParen,'Expected ")" after expression'),new k(e,e.line)}if(this.match(h.LeftBrace))return this.dictionary();if(this.match(h.LeftBracket))return this.list();if(this.match(h.Void)){const e=this.expression();return new B(e,this.previous().line)}if(this.match(h.Debug)){const e=this.expression();return new v(e,this.previous().line)}throw this.error(this.peek(),`Expected expression, unexpected token "${this.peek().lexeme}"`)}dictionary(){const e=this.previous();if(this.match(h.RightBrace))return new x([],this.previous().line);const t=[];do{if(this.match(h.String,h.Identifier,h.Number)){const e=this.previous();if(this.match(h.Colon)){const s=this.expression();t.push(new $(null,new w(e,e.line),s,e.line))}else{const s=new L(e,e.line);t.push(new $(null,new w(e,e.line),s,e.line))}}else this.error(this.peek(),`String, Number or Identifier expected as a Key of Dictionary {, unexpected token ${this.peek().lexeme}`)}while(this.match(h.Comma));return this.consume(h.RightBrace,'Expected "}" after object literal'),new x(t,e.line)}list(){const e=[],t=this.previous();if(this.match(h.RightBracket))return new b([],this.previous().line);do{e.push(this.expression())}while(this.match(h.Comma));return this.consume(h.RightBracket,'Expected "]" after array declaration'),new b(e,t.line)}}function K(e){return e>="0"&&e<="9"}function G(e){return e>="a"&&e<="z"||e>="A"&&e<="Z"}class R{scan(e){for(this.source=e,this.tokens=[],this.errors=[],this.current=0,this.start=0,this.line=1,this.col=1;!this.eof();){this.start=this.current;try{this.getToken()}catch(e){if(this.errors.push(`${e}`),this.errors.length>100)return this.errors.push("Error limit exceeded"),this.tokens}}return this.tokens.push(new o(h.Eof,"",null,this.line,0)),this.tokens}eof(){return this.current>=this.source.length}advance(){return"\n"===this.peek()&&(this.line++,this.col=0),this.current++,this.col++,this.source.charAt(this.current-1)}addToken(e,t){const s=this.source.substring(this.start,this.current);this.tokens.push(new o(e,s,t,this.line,this.col))}match(e){return!this.eof()&&this.source.charAt(this.current)===e&&(this.current++,!0)}peek(){return this.eof()?"\0":this.source.charAt(this.current)}peekNext(){return this.current+1>=this.source.length?"\0":this.source.charAt(this.current+1)}comment(){for(;"\n"!==this.peek()&&!this.eof();)this.advance()}multilineComment(){for(;!this.eof()&&("*"!==this.peek()||"/"!==this.peekNext());)this.advance();this.eof()?this.error('Unterminated comment, expecting closing "*/"'):(this.advance(),this.advance())}string(e){for(;this.peek()!==e&&!this.eof();)this.advance();if(this.eof())return void this.error(`Unterminated string, expecting closing ${e}`);this.advance();const t=this.source.substring(this.start+1,this.current-1);this.addToken("`"!==e?h.String:h.Template,t)}number(){for(;K(this.peek());)this.advance();for("."===this.peek()&&K(this.peekNext())&&this.advance();K(this.peek());)this.advance();for("e"===this.peek().toLowerCase()&&(this.advance(),"-"!==this.peek()&&"+"!==this.peek()||this.advance());K(this.peek());)this.advance();const e=this.source.substring(this.start,this.current);this.addToken(h.Number,Number(e))}identifier(){for(;G(e=this.peek())||K(e);)this.advance();var e;const t=this.source.substring(this.start,this.current),s=(i=t).charAt(0).toUpperCase()+i.substring(1).toLowerCase();var i;!function(e){return h[e]>=h.And}(s)?this.addToken(h.Identifier,t):this.addToken(h[s],t)}getToken(){const e=this.advance();switch(e){case"(":this.addToken(h.LeftParen,null);break;case")":this.addToken(h.RightParen,null);break;case"[":this.addToken(h.LeftBracket,null);break;case"]":this.addToken(h.RightBracket,null);break;case"{":this.addToken(h.LeftBrace,null);break;case"}":this.addToken(h.RightBrace,null);break;case",":this.addToken(h.Comma,null);break;case";":this.addToken(h.Semicolon,null);break;case"^":this.addToken(h.Caret,null);break;case"$":this.addToken(h.Dollar,null);break;case"#":this.addToken(h.Hash,null);break;case":":this.addToken(this.match("=")?h.Arrow:h.Colon,null);break;case"*":this.addToken(this.match("=")?h.StarEqual:h.Star,null);break;case"%":this.addToken(this.match("=")?h.PercentEqual:h.Percent,null);break;case"|":this.addToken(this.match("|")?h.Or:h.Pipe,null);break;case"&":this.addToken(this.match("&")?h.And:h.Ampersand,null);break;case">":this.addToken(this.match("=")?h.GreaterEqual:h.Greater,null);break;case"!":this.addToken(this.match("=")?h.BangEqual:h.Bang,null);break;case"?":this.addToken(this.match("?")?h.QuestionQuestion:this.match(".")?h.QuestionDot:h.Question,null);break;case"=":this.addToken(this.match("=")?h.EqualEqual:this.match(">")?h.Arrow:h.Equal,null);break;case"+":this.addToken(this.match("+")?h.PlusPlus:this.match("=")?h.PlusEqual:h.Plus,null);break;case"-":this.addToken(this.match("-")?h.MinusMinus:this.match("=")?h.MinusEqual:h.Minus,null);break;case"<":this.addToken(this.match("=")?this.match(">")?h.LessEqualGreater:h.LessEqual:h.Less,null);break;case".":this.match(".")?this.match(".")?this.addToken(h.DotDotDot,null):this.addToken(h.DotDot,null):this.addToken(h.Dot,null);break;case"/":this.match("/")?this.comment():this.match("*")?this.multilineComment():this.addToken(this.match("=")?h.SlashEqual:h.Slash,null);break;case"'":case'"':case"`":this.string(e);break;case"\n":case" ":case"\r":case"\t":break;default:K(e)?this.number():G(e)?this.identifier():this.error(`Unexpected character '${e}'`)}}error(e){throw new Error(`Scan Error (${this.line}:${this.col}) => ${e}`)}}class I{constructor(e,t){this.parent=e||null,this.init(t)}init(e){this.values=e?new Map(Object.entries(e)):new Map}set(e,t){this.values.set(e,t)}get(e){return this.values.has(e)?this.values.get(e):null!==this.parent?this.parent.get(e):window[e]}}class Q{constructor(){this.scope=new I,this.errors=[],this.scanner=new R,this.parser=new M}evaluate(e){return e.result=e.accept(this)}error(e){throw new Error(`Runtime Error => ${e}`)}visitVariableExpr(e){return this.scope.get(e.name.lexeme)}visitAssignExpr(e){const t=this.evaluate(e.value);return this.scope.set(e.name.lexeme,t),t}visitKeyExpr(e){return e.name.literal}visitGetExpr(e){const t=this.evaluate(e.entity),s=this.evaluate(e.key);if(t||e.type!==h.QuestionDot)return t[s]}visitSetExpr(e){const t=this.evaluate(e.entity),s=this.evaluate(e.key),i=this.evaluate(e.value);return t[s]=i,i}visitPostfixExpr(e){const t=this.scope.get(e.name.lexeme),s=t+e.increment;return this.scope.set(e.name.lexeme,s),t}visitListExpr(e){const t=[];for(const s of e.value){const e=this.evaluate(s);t.push(e)}return t}templateParse(e){const t=this.scanner.scan(e),s=this.parser.parse(t);this.parser.errors.length&&this.error(`Template string  error: ${this.parser.errors[0]}`);let i="";for(const e of s)i+=this.evaluate(e).toString();return i}visitTemplateExpr(e){return e.value.replace(/\{\{([\s\S]+?)\}\}/g,((e,t)=>this.templateParse(t)))}visitBinaryExpr(e){const t=this.evaluate(e.left),s=this.evaluate(e.right);switch(e.operator.type){case h.Minus:case h.MinusEqual:return t-s;case h.Slash:case h.SlashEqual:return t/s;case h.Star:case h.StarEqual:return t*s;case h.Percent:case h.PercentEqual:return t%s;case h.Plus:case h.PlusEqual:return t+s;case h.Pipe:return t|s;case h.Caret:return t^s;case h.Greater:return t>s;case h.GreaterEqual:return t>=s;case h.Less:return t<s;case h.LessEqual:return t<=s;case h.EqualEqual:return t===s;case h.BangEqual:return t!==s;default:return this.error("Unknown binary operator "+e.operator),null}}visitLogicalExpr(e){const t=this.evaluate(e.left);if(e.operator.type===h.Or){if(t)return t}else if(!t)return t;return this.evaluate(e.right)}visitTernaryExpr(e){return this.evaluate(e.condition).isTruthy()?this.evaluate(e.thenExpr):this.evaluate(e.elseExpr)}visitNullCoalescingExpr(e){return this.evaluate(e.left)||this.evaluate(e.right)}visitGroupingExpr(e){return this.evaluate(e.expression)}visitLiteralExpr(e){return e.value}visitUnaryExpr(e){const t=this.evaluate(e.right);switch(e.operator.type){case h.Minus:return-t;case h.Bang:return!t;case h.PlusPlus:case h.MinusMinus:const s=Number(t)+(e.operator.type===h.PlusPlus?1:-1);if(e.right instanceof L)this.scope.set(e.right.name.lexeme,s);else if(e.right instanceof E){const t=new $(e.right.entity,e.right.key,new S(s,e.line),e.line);this.evaluate(t)}else this.error(`Invalid right-hand side expression in prefix operation:  ${e.right}`);return s;default:return this.error("Unknown unary operator ' + expr.operator"),null}}visitCallExpr(e){const t=this.evaluate(e.callee);"function"!=typeof t&&this.error(`${t} is not a function`);const s=[];for(const t of e.args)s.push(this.evaluate(t));return e.callee instanceof E&&(e.callee.entity instanceof L||e.callee.entity instanceof k)?t.apply(e.callee.entity.result,s):t(...s)}visitNewExpr(e){const t=e.clazz,s=this.evaluate(t.callee);"function"!=typeof s&&this.error(`'${s}' is not a class. 'new' statement must be used with classes.`);const i=[];for(const e of t.args)i.push(this.evaluate(e));return new s(...i)}visitDictionaryExpr(e){const t={};for(const s of e.properties){const e=this.evaluate(s.key),i=this.evaluate(s.value);t[e]=i}return t}visitTypeofExpr(e){return typeof this.evaluate(e.value)}visitEachExpr(e){return[e.name.lexeme,e.key?e.key.lexeme:null,this.evaluate(e.iterable)]}visitVoidExpr(e){return this.evaluate(e.value),""}visitDebugExpr(e){const t=this.evaluate(e.value);return console.log(t),""}}class O{constructor(){this.scanner=new R,this.parser=new M,this.interpreter=new Q,this.errors=[]}evaluate(e,t){e.accept(this,t)}execute(e){const t=this.scanner.scan(e),s=this.parser.parse(t).map((e=>this.interpreter.evaluate(e)));return s&&s.length?s[0]:void 0}transpile(e,t){const s=document.createElement("kasper");this.interpreter.scope.init(t),this.errors=[];try{this.createSiblings(e,s)}catch(e){console.error(`${e}`)}return s}visitElementKNode(e,t){this.createElement(e,t)}visitTextKNode(e,t){let s;if(/\{\{.+\}\}/ms.test(e.value)){const t=e.value.replace(/\{\{([\s\S]+?)\}\}/g,((e,t)=>this.templateParse(t)));s=document.createTextNode(t)}else s=document.createTextNode(e.value);t&&t.appendChild(s)}visitAttributeKNode(e,t){const s=document.createAttribute(e.name);e.value&&(s.value=e.value),t&&t.setAttributeNode(s)}visitCommentKNode(e,t){const s=new Comment(e.value);t&&t.appendChild(s)}findAttr(e,t){if(!e||!e.attributes||!e.attributes.length)return null;return e.attributes.find((e=>t.includes(e.name)))||null}doIf(e,t){if(this.execute(e[0][1].value))this.createElement(e[0][0],t);else for(const s of e.slice(1,e.length))if(this.findAttr(s[0],["@elseif"])){if(this.execute(s[1].value))return void this.createElement(s[0],t)}else if(this.findAttr(s[0],["@else"]))return void this.createElement(s[0],t)}doEach(e,t,s){const i=this.scanner.scan(e.value),[r,n,a]=this.interpreter.evaluate(this.parser.foreach(i)),h=this.interpreter.scope;let o=0;for(const e of a){const i={[r]:e};n&&(i[n]=o),this.interpreter.scope=new I(h,i),this.createElement(t,s),o+=1}this.interpreter.scope=h}doWhile(e,t,s){const i=this.interpreter.scope;for(this.interpreter.scope=new I(i);this.execute(e.value);)this.createElement(t,s);this.interpreter.scope=i}doInit(e,t,s){const i=this.interpreter.scope;this.interpreter.scope=new I(i),this.execute(e.value),this.createElement(t,s),this.interpreter.scope=i}createSiblings(e,t){let s=0;for(;s<e.length;){const i=e[s++];if("element"===i.type){const r=this.findAttr(i,["@each"]);if(r){this.doEach(r,i,t);continue}const n=this.findAttr(i,["@if"]);if(n){const r=[[i,n]],a=i.name;let h=!0;for(;h&&!(s>=e.length);){const t=this.findAttr(e[s],["@else","@elseif"]);e[s].name===a&&t?(r.push([e[s],t]),s+=1):h=!1}this.doIf(r,t);continue}const a=this.findAttr(i,["@while"]);if(a){this.doWhile(a,i,t);continue}const h=this.findAttr(i,["@init"]);if(h){this.doInit(h,i,t);continue}}this.evaluate(i,t)}}createElement(e,t){const s="kvoid"===e.name,i=s?t:document.createElement(e.name);if(!s){const t=e.attributes.filter((e=>e.name.startsWith("@on:")));for(const e of t)this.createEventListener(i,e);e.attributes.filter((e=>!e.name.startsWith("@"))).map((e=>this.evaluate(e,i)))}e.self||(this.createSiblings(e.children,i),!s&&t&&t.appendChild(i))}createEventListener(e,t){const s=t.name.split(":")[1];e.addEventListener(s,(()=>{this.execute(t.value)}))}templateParse(e){const t=this.scanner.scan(e),s=this.parser.parse(t);this.parser.errors.length&&this.error(`Template string  error: ${this.parser.errors[0]}`);let i="";for(const e of s)i+=`${this.interpreter.evaluate(e)}`;return i}visitDoctypeKNode(e){}error(e){throw new Error(`Runtime Error => ${e}`)}}"undefined"!=typeof window?(window||{}).kasper={demoJson:'\n{\n  "person": {\n    "name": "John Doe",\n    "profession": "Software Developer",\n    "age": 20,\n    "hobbies": ["reading", "music", "golf"]\n  }\n}\n',demoSourceCode:'\n\x3c!-- accessing scope elements --\x3e\n<h3>{{person.name}}</h3>\n<h4>{{person.profession}}</h4>\n\n\x3c!-- conditional element creation --\x3e\n<p @if="person.age > 21">Age is greater than 21</p>\n<p @elseif="person.age == 21">Age is equal to 21</p>\n<p @elseif="person.age < 21">Age is less than 21</p>\n<p @else>Age is impossible</p>\n\n\x3c!-- iterating over arrays --\x3e\n<h4>Hobbies ({{person.hobbies.length}}):</h4>\n<ul class="list-disc">\n  <li @each="const hobby with index of person.hobbies" class="text-red">\n    {{index + 1}}: {{hobby}}\n  </li>\n</ul>\n\n\x3c!-- event binding --\x3e\n<div class="my-4">\n  <button\n    class="bg-blue-500 rounded px-4 py-2 text-white hover:bg-blue-700"\n    @on:click="alert(\'Hello World\'); console.log(100 / 2.5 + 15)"\n  >\n    CLICK ME\n  </button>\n</div>\n\n\x3c!-- evaluating code on element creation --\x3e\n<div @init="student = {name: person.name, degree: \'Masters\'}; console.log(student.name)">\n    {{student.name}}\n</div>\n\n\x3c!-- foreach loop with objects --\x3e\n<span @each="const item of Object.entries({a: 1, b: 2, c: 3 })">\n  {{item[0]}}:{{item[1]}},\n</span>\n\n\x3c!-- while loop --\x3e\n<span @init="index = 0">\n   <span @while="index < 3">\n     {{index = index + 1}},\n   </span>\n</span>\n\n\x3c!-- void elements --\x3e\n<div>\n  <kvoid @init="index = 0">\n    <kvoid @while="index < 3">\n      {{index = index + 1}}\n    </kvoid>\n  </kvoid>\n</div>\n\n\x3c!-- complex expressions --\x3e\n{{Math.floor(Math.sqrt(100 + 20 / (10 * (Math.abs(10 -20)) + 4)))}}\n\n\x3c!-- void expression --\x3e\n{{void "this won\'t be shown"}}\n\n\x3c!-- logging / debugging  --\x3e\n{{debug "expression"}}\n{{void console.log("same as previous just less wordy")}}\n\n',execute:function(e){const t=new l,s=t.parse(e);return t.errors.length?JSON.stringify(t.errors):JSON.stringify(s)},transpile:function(e,t){const s=(new l).parse(e);return(new O).transpile(s,t)}}:"undefined"!=typeof exports&&(exports.kasper={ExpressionParser:M,Interpreter:Q,Scanner:R,TemplateParser:l,Transpiler:O,Viewer:class{constructor(){this.errors=[]}evaluate(e){return e.accept(this)}transpile(e){this.errors=[];const t=[];for(const s of e)try{t.push(this.evaluate(s))}catch(e){if(console.error(`${e}`),this.errors.push(`${e}`),this.errors.length>100)return this.errors.push("Error limit exceeded"),t}return t}visitElementKNode(e){let t=e.attributes.map((e=>this.evaluate(e))).join(" ");if(t.length&&(t=" "+t),e.self)return`<${e.name}${t}/>`;const s=e.children.map((e=>this.evaluate(e))).join("");return`<${e.name}${t}>${s}</${e.name}>`}visitAttributeKNode(e){return e.value?`${e.name}="${e.value}"`:e.name}visitTextKNode(e){return e.value}visitCommentKNode(e){return`\x3c!-- ${e.value} --\x3e`}visitDoctypeKNode(e){return`<!doctype ${e.value}>`}error(e){throw new Error(`Runtime Error => ${e}`)}}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,